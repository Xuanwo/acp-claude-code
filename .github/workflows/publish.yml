name: Publish Package

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true
        type: string
      tag:
        description: 'NPM dist tag'
        required: false
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - next
          - alpha

permissions:
  contents: write
  packages: write
  id-token: write  # Required for signing and provenance

jobs:
  publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run quality checks
        run: |
          pnpm typecheck
          pnpm lint
          pnpm build

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Update package version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version

      - name: Publish to npm with OIDC
        id: npm-publish
        run: |
          # Determine dist-tag
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          elif [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            TAG="beta"
          else
            TAG="latest"
          fi
          
          echo "Publishing with tag: $TAG"
          
          # Publish with provenance (OIDC)
          npm publish --access public --tag "$TAG" --provenance
          echo "âœ… Published with provenance (OIDC)"
          echo "method=oidc" >> $GITHUB_OUTPUT

      - name: Create GitHub Release (if not exists)
        if: github.event_name != 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Installation
            ```bash
            npm install acp-claude-code@${{ steps.version.outputs.version }}
            ```
            
            âœ… Published with npm provenance
            
            ### Changelog
            See [commits](https://github.com/${{ github.repository }}/commits/v${{ steps.version.outputs.version }})
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}

      - name: Summary
        run: |
          echo "## ðŸ“¦ Package Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: acp-claude-code" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: https://www.npmjs.com/package/acp-claude-code" >> $GITHUB_STEP_SUMMARY
          echo "- **Method**: OIDC with provenance âœ…" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Install" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install acp-claude-code@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY